#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers
source ./_common.sh

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANG

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=2

ynh_app_setting_set --app=$app --key=domain    --value=$domain
ynh_app_setting_set --app=$app --key=path      --value=$path_url
ynh_app_setting_set --app=$app --key=is_public --value=$is_public

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Configuring firewall..." --weight=2

# Find an available port
port=$(ynh_find_port --port=3000)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=20

ynh_install_app_dependencies $pkg_dependencies

# Install Nodejs
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

# Install Yarn
#ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

if [ "$(lsb_release --codename --short)" = "buster" ]; then
	ynh_install_extra_app_dependencies --repo="deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main" --package="$pkg_dependencies_buster" --key="https://www.mongodb.org/static/pgp/server-4.2.asc"
	mongodb_servicename=$mongodb_buster
else
	ynh_install_app_dependencies $pkg_dependencies
	mongodb_servicename=$mongodb_stretch
fi

#=================================================
# CREATE A MONGODB DATABASE
#=================================================
ynh_print_info --message="Creating a MongoDB database..."

# Start mongodb
systemctl enable $mongodb_servicename
systemctl start $mongodb_servicename

# Registering db name
db_name=$(ynh_sanitize_dbid --db_name=$app)
ynh_app_setting_set --app=$app --key=db_name --value=$db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=2

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir=$final_path

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring Nginx web server..." --weight=2

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=3

# Create a system user
ynh_system_user_create --username=$app --home_dir=$final_path

#=================================================
# SPECIFIC SETUP
#==============================================
# INSTALL HEDGEDOC
#==============================================
ynh_script_progression --message="Building $app... (this will take some time and resources!)" --weight=240

pushd "$final_path/server/" || ynh_die

npm install --production

popd || ynh_die

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=1

ynh_replace_string --match_string="__ENV_PATH__"  --replace_string="$PATH"    --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__YNH_NPM__"   --replace_string="$ynh_npm" --target_file="../conf/systemd.service"

ynh_add_systemd_config

# #=================================================
# # MODIFY A CONFIG FILE
# #=================================================
# ynh_script_progression --message="Modifying a config file..."

# cp ../conf/config.json.example "$final_path/config.json"

# # Main config File
# ynh_replace_string --match_string="__ROOTURL__"    --replace_string="$domain"     --target_file="$final_path/config.json"
# ynh_replace_string --match_string="__LOCATION__"  --replace_string="${path:-/}"   --target_file="$final_path/config.json"
# ynh_replace_string --match_string="__PORT__" --replace_string="$port"  --target_file="$final_path/config.json"
# ynh_replace_string --match_string="__USER__" --replace_string="$serviceuser"  --target_file="$final_path/config.json"
# ynh_replace_string --match_string="__DESTDIR__" --replace_string="$final_path"   --target_file="$final_path/config.json"
# ynh_replace_string --match_string="__DBNAME__"     --replace_string="$dbname"      --target_file="$final_path/config.json"

# ynh_store_file_checksum --file="$final_path/config.json"


# cp ../conf/.sequelizerc.example "$final_path/.sequelizerc"

# # DB Config File
# ynh_replace_string --match_string="__DB_USER__" --replace_string="$db_user" --target_file="$final_path/.sequelizerc"
# ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name" --target_file="$final_path/.sequelizerc"
# ynh_replace_string --match_string="__DB_PASS__" --replace_string="$db_pwd"  --target_file="$final_path/.sequelizerc"

# ynh_store_file_checksum --file="$final_path/.sequelizerc"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions to app files
chown -R $app:$app $final_path

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --description "Chat" --log="/var/log/$app/$app.log"
yunohost service add mongodb --description "MongoDB daemon" --log "/var/log/mongodb/mongodb.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="systemd" #--line_match="HTTP Server listening"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..." --weight=1

# Make app public if necessary or protect it
if [ $is_public -eq 1 ]
then
	ynh_permission_update --permission "main" --add "visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=2

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last






# #=================================================


# # Create user
# id -u $serviceuser || useradd -d "$final_path" -M $serviceuser

# # Copy and set systemd configuration
# ynh_replace_string "#ROOTURL#" "$domain" ../conf/rocketchat.service
# ynh_replace_string "#LOCATION#" "${path:-/}" ../conf/rocketchat.service
# ynh_replace_string "#PORT#" "$port" ../conf/rocketchat.service
# ynh_replace_string "#USER#" "$serviceuser" ../conf/rocketchat.service
# ynh_replace_string "#DESTDIR#" "$final_path" ../conf/rocketchat.service
# ynh_replace_string "#DBNAME#" "$dbname" ../conf/rocketchat.service




# #set db name into ldap config
# ynh_replace_string "__DB_NAME__" "$db_name" ../conf/rocketchat_ldap.js



# # #=================================================
# # # DOWNLOAD, CHECK AND UNPACK SOURCE
# # #=================================================




# cd $final_path/programs/server/

# sudo -u $serviceuser npm install --production

# cd $workdir

# systemctl reload nginx
# if [ "$is_public" = "Yes" ];
# then
# 	ynh_app_setting_set "$app" skipped_uris "/"
# fi

# systemctl start $app.service
# systemctl enable $app.service

# # add rocketchat to services
# yunohost service add $app

# # wait for rocketchat to populate db and start
# waitforservice

# mongo < ../conf/rocketchat_ldap.js

# systemctl restart $app.service

# waitforservice

# yunohost app ssowatconf
